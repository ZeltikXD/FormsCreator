// <auto-generated />
using System;
using FormsCreator.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FormsCreator.Infrastructure.Data.Migrations
{
    [DbContext(typeof(FormsDbContext))]
    [Migration("20241021230326_TheFirstMigration")]
    partial class TheFirstMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:CollationDefinition:en_us_ci", "en-US-u-ks-level2,en-US-u-ks-level2,icu,False")
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FormsCreator.Core.Models.Answer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("FormId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FormId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("QuestionId");

                    b.ToTable("Answers", (string)null);
                });

            modelBuilder.Entity("FormsCreator.Core.Models.AnswerOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AnswerId")
                        .HasColumnType("uuid");

                    b.Property<string>("Column")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("QuestionOptionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Row")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Value")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("AnswerId");

                    b.HasIndex("QuestionOptionId");

                    b.HasIndex("Id", "AnswerId");

                    b.ToTable("Answers_Options", (string)null);
                });

            modelBuilder.Entity("FormsCreator.Core.Models.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("TemplateId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Content")
                        .HasDatabaseName("index_comment_text_search_english")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Content"), "gin");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("TemplateId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments", (string)null);
                });

            modelBuilder.Entity("FormsCreator.Core.Models.Form", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("TemplateId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("TemplateId");

                    b.HasIndex("UserId");

                    b.ToTable("Forms", (string)null);
                });

            modelBuilder.Entity("FormsCreator.Core.Models.Like", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TemplateId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.HasKey("UserId", "TemplateId");

                    b.HasIndex("TemplateId");

                    b.HasIndex("UserId", "TemplateId")
                        .IsUnique();

                    b.ToTable("Likes", (string)null);
                });

            modelBuilder.Entity("FormsCreator.Core.Models.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<int>("Index")
                        .HasColumnType("integer");

                    b.Property<bool>("IsVisibleInTable")
                        .HasColumnType("boolean");

                    b.Property<Guid>("TemplateId")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Description")
                        .HasDatabaseName("index_question_desc_search_english")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Description"), "GIN");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("TemplateId");

                    b.HasIndex("Text")
                        .HasDatabaseName("index_question_text_search_english")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Text"), "gin");

                    b.ToTable("Questions", (string)null);
                });

            modelBuilder.Entity("FormsCreator.Core.Models.QuestionOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Column")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Row")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("QuestionId");

                    b.ToTable("QuestionOptions", (string)null);
                });

            modelBuilder.Entity("FormsCreator.Core.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    NpgsqlIndexBuilderExtensions.UseCollation(b.HasIndex("Name"), new[] { "en_us_ci" });

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("6d0224d8-761f-4e9f-bc37-4b56fe209fcd"),
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 10, 21, 23, 3, 24, 301, DateTimeKind.Unspecified).AddTicks(1483), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "User"
                        },
                        new
                        {
                            Id = new Guid("7428d1fb-0408-4795-b229-67852851cb0b"),
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 10, 21, 23, 3, 24, 301, DateTimeKind.Unspecified).AddTicks(1486), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Admin"
                        });
                });

            modelBuilder.Entity("FormsCreator.Core.Models.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    NpgsqlIndexBuilderExtensions.UseCollation(b.HasIndex("Name"), new[] { "en_us_ci" });

                    b.ToTable("Tags", (string)null);
                });

            modelBuilder.Entity("FormsCreator.Core.Models.Template", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Image_Url")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<Guid>("TopicId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("TopicId");

                    b.HasIndex("Title", "Description")
                        .HasDatabaseName("index_template_text_search_english")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Title", "Description"), "gin");

                    b.ToTable("Templates", (string)null);
                });

            modelBuilder.Entity("FormsCreator.Core.Models.TemplateAccess", b =>
                {
                    b.Property<Guid>("TemplateId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("TemplateId", "UserId");

                    b.HasIndex("UserId");

                    b.HasIndex("TemplateId", "UserId")
                        .IsUnique();

                    b.ToTable("Template_Accesses", (string)null);
                });

            modelBuilder.Entity("FormsCreator.Core.Models.Topic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    NpgsqlIndexBuilderExtensions.UseCollation(b.HasIndex("Name"), new[] { "en_us_ci" });

                    b.ToTable("Topics", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("67347b68-508d-468c-a383-a16478ad794c"),
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 10, 21, 23, 3, 24, 304, DateTimeKind.Unspecified).AddTicks(2521), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Education"
                        },
                        new
                        {
                            Id = new Guid("c6187d27-9ba8-4c07-be76-9ba2e9e61f8f"),
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 10, 21, 23, 3, 24, 304, DateTimeKind.Unspecified).AddTicks(2522), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Quiz"
                        },
                        new
                        {
                            Id = new Guid("153be8a1-91f2-4850-a5d6-89a8bffbadc3"),
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 10, 21, 23, 3, 24, 304, DateTimeKind.Unspecified).AddTicks(2537), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Other"
                        });
                });

            modelBuilder.Entity("FormsCreator.Core.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(254)
                        .HasColumnType("character varying(254)");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    NpgsqlIndexBuilderExtensions.UseCollation(b.HasIndex("Email"), new[] { "en_us_ci" });

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.HasIndex("UserName")
                        .IsUnique();

                    NpgsqlIndexBuilderExtensions.UseCollation(b.HasIndex("UserName"), new[] { "en_us_ci" });

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("b24bdd4f-c86c-4a8f-903b-92aabc7c77cd"),
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 10, 21, 23, 3, 24, 304, DateTimeKind.Unspecified).AddTicks(6028), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "admin@formscreator.com",
                            IsBlocked = false,
                            IsEmailConfirmed = true,
                            PasswordHash = "",
                            PasswordSalt = "",
                            RoleId = new Guid("7428d1fb-0408-4795-b229-67852851cb0b"),
                            UserName = "Default_admin"
                        });
                });

            modelBuilder.Entity("FormsCreator.Core.Models.UserProvider", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("ExpireTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProviderId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("UserProviders", (string)null);
                });

            modelBuilder.Entity("FormsCreator.Infrastructure.Data.Internal.TemplateTag", b =>
                {
                    b.Property<Guid>("TagId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TemplateId")
                        .HasColumnType("uuid");

                    b.HasKey("TagId", "TemplateId");

                    b.HasIndex("TemplateId");

                    b.HasIndex("TagId", "TemplateId")
                        .IsUnique();

                    b.ToTable("Templates_Tags", (string)null);
                });

            modelBuilder.Entity("FormsCreator.Core.Models.Answer", b =>
                {
                    b.HasOne("FormsCreator.Core.Models.Form", "Form")
                        .WithMany("Answers")
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FormsCreator.Core.Models.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Form");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("FormsCreator.Core.Models.AnswerOption", b =>
                {
                    b.HasOne("FormsCreator.Core.Models.Answer", "Answer")
                        .WithMany("Options")
                        .HasForeignKey("AnswerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FormsCreator.Core.Models.QuestionOption", "QuestionOption")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionOptionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Answer");

                    b.Navigation("QuestionOption");
                });

            modelBuilder.Entity("FormsCreator.Core.Models.Comment", b =>
                {
                    b.HasOne("FormsCreator.Core.Models.Template", "Template")
                        .WithMany("Comments")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FormsCreator.Core.Models.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Template");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FormsCreator.Core.Models.Form", b =>
                {
                    b.HasOne("FormsCreator.Core.Models.Template", "Template")
                        .WithMany("Forms")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FormsCreator.Core.Models.User", "User")
                        .WithMany("Forms")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Template");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FormsCreator.Core.Models.Like", b =>
                {
                    b.HasOne("FormsCreator.Core.Models.Template", "Template")
                        .WithMany("Likes")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FormsCreator.Core.Models.User", "User")
                        .WithMany("Likes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Template");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FormsCreator.Core.Models.Question", b =>
                {
                    b.HasOne("FormsCreator.Core.Models.Template", "Template")
                        .WithMany("Questions")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Template");
                });

            modelBuilder.Entity("FormsCreator.Core.Models.QuestionOption", b =>
                {
                    b.HasOne("FormsCreator.Core.Models.Question", "Question")
                        .WithMany("Options")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("FormsCreator.Core.Models.Template", b =>
                {
                    b.HasOne("FormsCreator.Core.Models.User", "Creator")
                        .WithMany("Templates")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FormsCreator.Core.Models.Topic", "Topic")
                        .WithMany("Templates")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Creator");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("FormsCreator.Core.Models.TemplateAccess", b =>
                {
                    b.HasOne("FormsCreator.Core.Models.Template", "Template")
                        .WithMany("UsersAllowed")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FormsCreator.Core.Models.User", "User")
                        .WithMany("TemplateAccesses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Template");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FormsCreator.Core.Models.User", b =>
                {
                    b.HasOne("FormsCreator.Core.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Role");
                });

            modelBuilder.Entity("FormsCreator.Core.Models.UserProvider", b =>
                {
                    b.HasOne("FormsCreator.Core.Models.User", "User")
                        .WithMany("Providers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FormsCreator.Infrastructure.Data.Internal.TemplateTag", b =>
                {
                    b.HasOne("FormsCreator.Core.Models.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FormsCreator.Core.Models.Template", null)
                        .WithMany()
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FormsCreator.Core.Models.Answer", b =>
                {
                    b.Navigation("Options");
                });

            modelBuilder.Entity("FormsCreator.Core.Models.Form", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("FormsCreator.Core.Models.Question", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("Options");
                });

            modelBuilder.Entity("FormsCreator.Core.Models.QuestionOption", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("FormsCreator.Core.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("FormsCreator.Core.Models.Template", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Forms");

                    b.Navigation("Likes");

                    b.Navigation("Questions");

                    b.Navigation("UsersAllowed");
                });

            modelBuilder.Entity("FormsCreator.Core.Models.Topic", b =>
                {
                    b.Navigation("Templates");
                });

            modelBuilder.Entity("FormsCreator.Core.Models.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Forms");

                    b.Navigation("Likes");

                    b.Navigation("Providers");

                    b.Navigation("TemplateAccesses");

                    b.Navigation("Templates");
                });
#pragma warning restore 612, 618
        }
    }
}
