@model ShowPaging<TemplateResponseDto>
@using FormsCreator.Application.Utils
@{
    ViewData["Title"] = WebResources.MainNavbarMyTemplates;
}

@section Styles {
    <link rel="stylesheet" href="~/main/css/select2.min.css" />
    <link rel="stylesheet" href="~/main/css/select2-bootstrap-5-theme.min.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/admin/extensions/sweetalert2/sweetalert2.min.css" />
    <link rel="stylesheet" href="~/admin/css/extra-component-sweetalert.css" asp-append-version="true" />
}

<partial name="_MainCommonHeader" model="@WebResources.MainNavbarMyTemplates" />

<section class="latest-podcast-section section-padding pt-0" id="section_2">
    <div class="container">
        <div class="row justify-content-center">

            <div class="col-lg-12 col-12">
                <div class="section-title-wrap mb-5">
                    <h4 class="section-title">@WebResources.MainNavbarMyTemplates</h4>
                </div>
            </div>
            @{ int i = 0; }
            @foreach (var item in Model.DisplayResult)
            {
                if (i % 2 == 0){<hr style="color: transparent" />}
                <div class="col-lg-6 col-12 mb-4 mb-lg-0">
                    <div class="custom-block d-flex">
                    <div class="">
                        <div class="custom-block-icon-wrap">
                            <div class="section-overlay"></div>
                            <a href="detail-page.html" class="custom-block-image-wrap">
                                <img src="@item.Image_Url" class="custom-block-image img-fluid" alt="@item.Title">
                            </a>
                        </div>

                        <div class="mt-2">
                            <a asp-action="Edit" asp-route-templateId="@item.Id" class="btn custom-btn">
                                @WebResources.SimpleWordEdit
                            </a>
                        </div>

                        <div class="mt-2">
                            <a asp-controller="Form" asp-action="FormsByTemplate" class="btn custom-btn" asp-route-templateId="@item.Id">
                                @WebResources.ViewForms
                            </a>
                        </div>

                        <div class="mt-2">
                            <button type="button" data-templateid="@item.Id" class="btn custom-btn" data-bs-toggle="modal" data-bs-target="#staticBackdrop" @SetDisabled(item.IsPublic)>
                                @WebResources.ManageAccess
                            </button>
                        </div>
                    </div>

                    <div class="custom-block-info">

                        <h5 class="mb-2">
                            <a href="detail-page.html">
                                @item.Title
                            </a>
                        </h5>

                            <div class="profile-block d-flex">
                                <p>
                                    @WebResources.HomeIndexTableTags: @string.Join(", ", item.Tags.Select(x => x.Name))
                                    <strong>@WebResources.HomeIndexTableTopic: @item.Topic.Name</strong>
                                    <strong>@WebResources.IsPublic: @(item.IsPublic ? WebResources.SimpleWordYes : WebResources.SimpleWordNo)</strong>
                                </p>
                            </div>

                        <p class="mb-0">@item.Description</p>

                        <div class="custom-block-bottom d-flex justify-content-between mt-3">

                                <a href="javascript:void(0)" class="bi-heart me-1">
                                    <span>@item.LikesCount</span>
                                </a>

                                <a href="javascript:void(0)" class="bi-chat me-1">
                                    <span>@item.CommentsCount</span>
                                </a>

                                <a href="javascript:void(0)" class="bi-archive me-1">
                                    <span>@item.FormsCount</span>
                                </a>
                                <a href="javascript:void(0)" class="">

                                </a>

                                <a href="javascript:void(0)" class="">

                                </a>
                        </div>
                    </div>
                </div>
            </div>
            i++;
            }
            @if (!Model.DisplayResult.Any())
            {
                <div class="col-lg-6 col-12 mb-4 mb-lg-0">@WebResources.HomeIndexNoTemplates</div>
            }
            @if (Model.PageInfo.TotalItems > Model.PageInfo.ItemsPerPage) {
            <div class="col-lg-4 col-12 mx-auto">
                @Html.PageLinks(Model.PageInfo, (page) => Url.Action("MyTemplates", new { page, size = Model.PageInfo.ItemsPerPage }))
            </div>
            }
        </div>
    </div>
</section>

@section ExtraElements {
    <div class="modal fade" id="staticBackdrop" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h1 class="modal-title fs-5" id="staticBackdropLabel">@WebResources.AddOrRemovePermissionToTemplate</h1>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <label class="form-label">@WebResources.SimpleWordUsers</label>
                    <select id="users-dropdown" class="form-select endure-text-black" multiple data-placeholder="@WebResources.ChooseAnything"></select>
                </div>
                <div class="modal-footer">
                    <button type="button" id="button_add_permission" class="btn btn-primary">@WebResources.AddPermission</button>
                    <button type="button" id="button_remove_permission" class="btn btn-danger">@WebResources.RemovePermission</button>
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">@WebResources.SimpleWordClose</button>
                </div>
            </div>
        </div>
    </div>
}

@section Scripts {
    <script src="~/main/js/select2.full.min.js"></script>
    <script src="~/admin/extensions/sweetalert2/sweetalert2.min.js"></script>
    <script type="text/javascript">
        $('#users-dropdown').select2({
            theme: "bootstrap-5",
            width: $(this).data('width') ? $(this).data('width') : $(this).hasClass('w-100') ? '100%' : 'style',
            placeholder: $(this).data('placeholder'),
            closeOnSelect: false,
            dropdownParent: $('#staticBackdrop'),
            ajax: {
                url: '@Url.Action("SearchByTerm", "User")',
                dataType: 'json',
                delay: 250,
                data: function (params) {
                    return {
                        q: params.term
                    };
                },
                processResults: function (data) {
                    return {
                        results: $.map(data, function (item) {
                            return {
                                id: item.id,
                                text: item.userName
                            };
                        })
                    };
                },
                cache: true
            },
            tags: true,
            createTag: function () {
                return null;
            }
        });

        document.addEventListener('DOMContentLoaded', () => {
            const buttonAdd = document.getElementById('button_add_permission');
            const buttonRemove = document.getElementById('button_remove_permission');
            const selectorElement = document.getElementById('users-dropdown');

            let currentTemplateId = '';
            document.querySelectorAll('button.btn.custom-btn').forEach((item) => {
                item.addEventListener('click', (ev) => {
                    currentTemplateId = ev.target.getAttribute('data-templateid');
                });
            });

            const request = async ({ url, method, body }) => {
                const res = await fetch(url, { method: method, body: body });
                const { message } = await res.json();
                if (res.ok) {
                    Swal.fire({
                        title: '@WebResources.ChangesMade',
                        text: `@WebResources.ChangesSuccessfully`,
                        icon: 'success',
                        confirmButtonText: '@WebResources.SimpleWordUnderstood'
                    });
                    return;
                }
                Swal.fire({
                    title: '@WebResources.FailedChanges',
                    text: message,
                    icon: 'error',
                    confirmButtonText: '@WebResources.SimpleWordUnderstood'
                });
            };

            buttonAdd.addEventListener('click', () => {
                buttonAdd.disabled = true;
                buttonRemove.disabled = true;
                const values = getSelectedValues();
                if (values.length === 0) {
                    buttonAdd.disabled = false;
                    buttonRemove.disabled = false;
                    return;
                }
                const form = new FormData();
                form.append('TemplateId', currentTemplateId);
                values.forEach((item, index) => {
                    form.append(`UserIds[${index}]`, item);
                });

                request({ url: '@Url.Action("PostRange", "TemplateAccess")', method: 'POST', body: form })
                    .then(() => {
                        buttonAdd.disabled = false;
                        buttonRemove.disabled = false;
                    });
            });

            buttonRemove.addEventListener('click', () => {
                buttonAdd.disabled = true;
                buttonRemove.disabled = true;
                const values = getSelectedValues();
                if (values.length === 0) {
                    buttonAdd.disabled = false;
                    buttonRemove.disabled = false;
                    return;
                }
                const form = new FormData();
                form.append('TemplateId', currentTemplateId);
                values.forEach((item, index) => {
                    form.append(`UserIds[${index}]`, item);
                });

                request({ url: '@Url.Action("DeleteRange", "TemplateAccess")', method: 'DELETE', body: form })
                .then(() => {
                    buttonAdd.disabled = false;
                    buttonRemove.disabled = false;
                })
            });

            function getSelectedValues() {
                return Array.from(selectorElement.selectedOptions).map(opt => opt.value);
            }
        });
    </script>
}
@functions {
    static string SetDisabled(bool value)
        => value ? "disabled" : string.Empty;
}