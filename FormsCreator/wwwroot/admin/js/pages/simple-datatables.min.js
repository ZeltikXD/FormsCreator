class DataTableInit { #a = null; #e = 0; #t = 1; get DataTable() { return this.#a } constructor(a, e, t, i = void 0) { this.#e = e, this.#t = t, this.#a = new simpleDatatables.DataTable(document.getElementById(a), { paging: !0, perPage: void 0 === i ? this.#i()[0] : i, perPageSelect: this.#i() }), this.#a.on("datatable.init", (() => { this.#s(), this.#n() })), this.#a.on("datatable.update", this.#n.bind(this)), this.#a.on("datatable.sort", this.#n.bind(this)), this.#a.on("datatable.page", (a => { this.#t = a.detail.page + 1, this.#r(), this.#l() })), this.#a.wrapper.querySelector(".dataTable-selector").addEventListener("change", (a => { this.#o(a.target.value) })) } #s() { const a = this.#a.wrapper.querySelector(".dataTable-selector"); a.parentNode.parentNode.insertBefore(a, a.parentNode), a.classList.add("form-select") } #r() { const a = this.#a.wrapper.querySelectorAll("ul.dataTable-pagination-list"); for (const e of a) e.classList.add("pagination", "pagination-primary"); const e = this.#a.wrapper.querySelectorAll("ul.dataTable-pagination-list li"); for (const a of e) a.classList.add("page-item"); const t = this.#a.wrapper.querySelectorAll("ul.dataTable-pagination-list li a"); for (const a of t) a.classList.add("page-link") } #n() { const a = this.#a.options.perPage, e = Math.ceil(this.#e / a); this.customPagination(e, a), this.#r(), this.#l() } #i() { return [5, 10, 15, 20, 25, 30] } #o(a) { const e = new URL(window.location.href); e.searchParams.set("page", 1), e.searchParams.set("size", a), window.location.href = e.toString() } #l() { const a = this.#a.options.perPage, e = `Showing ${(this.#t - 1) * a + 1} to ${Math.min(this.#t * a, this.#e)} of ${this.#e} entries`, t = this.#a.wrapper.querySelector(".dataTable-info"); if (t) t.textContent = e; else { const a = document.createElement("div"); a.classList.add("dataTable-info"), a.textContent = e, this.#a.wrapper.appendChild(a) } } applyFilters(a) { const e = new URL(window.location.href); e.searchParams.set("page", 1); for (const t in a) e.searchParams.set(t, a[t]); window.location.href = e.toString() } #h(a, e) { let t = []; if (this.#t > 1) { let a = new URL(window.location.href); a.searchParams.set("page", this.#t - 1), a.searchParams.set("size", e), t.push(`<li class="page-item">\n                            <a class="page-link" href="${a.toString()}" aria-label="Previous">\n                                <span aria-hidden="true">&laquo;</span>\n                            </a>\n                        </li>`) } if (a <= 4) for (let i = 1; i <= a; i++) { let a = new URL(window.location.href); a.searchParams.set("page", i), a.searchParams.set("size", e); const s = i === this.#t; t.push(`<li class="page-item ${s ? "active" : ""}">\n                                <a class="page-link" href="${s ? "javascript:void(0);" : a.toString()}">${i}</a>\n                            </li>`) } else { let i = Math.max(1, this.#t - Math.floor(2)), s = Math.min(a, this.#t + Math.floor(2)); if (i > 1) { let a = new URL(window.location.href); a.searchParams.set("page", 1), a.searchParams.set("size", e), t.push(`<li class="page-item">\n                                <a class="page-link" href="${a.toString()}">1</a>\n                            </li>`), i > 2 && t.push('<li class="page-item disabled">\n                                    <a class="page-link" href="#">...</a>\n                                </li>') } for (let a = i; a <= s; a++) { let i = new URL(window.location.href); i.searchParams.set("page", a), i.searchParams.set("size", e); const s = a === this.#t; t.push(`<li class="page-item ${s ? "active" : ""}">\n                                <a class="page-link" href="${s ? "javascript:void(0);" : i.toString()}">${a}</a>\n                            </li>`) } if (s < a) { s < a - 1 && t.push('<li class="page-item disabled">\n                                    <a class="page-link" href="#">...</a>\n                                </li>'); let i = new URL(window.location.href); i.searchParams.set("page", a), i.searchParams.set("size", e), t.push(`<li class="page-item">\n                                <a class="page-link" href="${i.toString()}">${a}</a>\n                            </li>`) } } if (this.#t < a) { let a = new URL(window.location.href); a.searchParams.set("page", this.#t + 1), a.searchParams.set("size", e), t.push(`<li class="page-item">\n                            <a class="page-link" href="${a.toString()}" aria-label="Next">\n                                <span aria-hidden="true">&raquo;</span>\n                            </a>\n                        </li>`) } return t.join("") } customPagination(a, e) { const t = this.#a.wrapper.querySelector("ul.dataTable-pagination-list"); t.innerHTML = "", t.innerHTML = this.#h(a, e) } }